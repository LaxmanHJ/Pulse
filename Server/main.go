package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type AutoGenerated struct {
	Data struct {
		Currency string            `json:"currency"`
		Rates    map[string]string `json:"rates"`
	} `json:"data"`
}

func main() {
	// Set the router as the default one shipped with Gin
	router := gin.Default()

	// Serve frontend static files
	//router.Use(static.Serve("/", static.LocalFile("./client/public/", true)))
	// Setup route group for the API
	api := router.Group("/api")
	{
		api.GET("/", func(c *gin.Context) {
			c.JSON(http.StatusOK, gin.H{
				"message": "pong",
			})
		})
	}

	api.GET("/price/:coin", _getPrice)

	// Start and run the server
	router.Run(":3000")
}

func _getPrice(c *gin.Context) {
	var price string
	var finalPrice float64
	var currency = "INR"
	coin := c.Param("coin")

	var url string = "https://api.coinbase.com/v2/exchange-rates?currency=" + currency
	response, err := http.Get(url)
	if err != nil {
		fmt.Print("Some error happened while fetching data", err)
		finalPrice = 0.00
	} else {
		fmt.Printf(url)
		data, _ := ioutil.ReadAll(response.Body)
		var res AutoGenerated
		json.Unmarshal(data, &res)
		typeOfCur := res.Data.Currency
		ratesMap := res.Data.Rates
		price = ratesMap[coin]
		fmt.Print("Type Of Currency", typeOfCur)
		//fmt.Print("Rates Map \n", ratesMap)
		finalPrice, err = strconv.ParseFloat(price, 64)
		if err != nil {
			finalPrice = 0.00
		} else {
			finalPrice = 1 / finalPrice
		}

	}

	c.Header("Content-Type", "application/json")
	c.Header("Access-Control-Allow-Origin", "http://localhost:3001")

	c.Header("Access-Control-Allow-Methods", "PUT, POST, GET, DELETE, OPTIONS")

	c.JSON(http.StatusOK, finalPrice)
}
